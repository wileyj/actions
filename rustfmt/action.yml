name: "Check formatting of Rust code with rustfmt"
description: |
  Run `cargo fmt` and check Rust code.
  Highlights places which are not correctly formatted.
branding:
  icon: "check-square"
  color: "yellow"

inputs:
  manifest-path:
    description: "Specify the --manifest-path argument to rustfmt"
    required: false
    default: "./Cargo.toml"
  alias:
    description: "Fmt alias to run"
    required: false
    default: "fmt"
  rust-toolchain:
    description: "Rust toolchain to use"
    required: false
    default: "stable"

runs:
  using: composite
  steps:
    - name: Checkout the latest code
      id: git_checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Define Rust Toolchain
      shell: bash
      id: define_rust_toolchain
      run: |
        if [ ${{ inputs.rust-toolchain }} != "" ]; then
          echo "RUST_TOOLCHAIN=${{ inputs.rust-toolchain }}" >> $GITHUB_ENV
          exit 0
        else
          echo "RUST_TOOLCHAIN=$(cat ./rust-toolchain)" >> $GITHUB_ENV
        fi

    - name: Setup Rust Toolchain
      id: setup_rust_toolchain
      uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1.10.1
      with:
        toolchain: ${{ env.RUST_TOOLCHAIN || 'stable' }}
        components: rustfmt
        cache: false

    - name: Rustfmt Job Summary
      shell: bash
      run: |
        # Find Cargo config file
        declare -a config_file_locations=(".cargo/config.toml" ".cargo/config")
        config_file=""
        for file in "${config_file_locations[@]}"; do
          if [ -f "$file" ]; then
            config_file="$file"
            break
          fi
        done
        if [ -z "$config_file" ]; then
          echo "No config file found!";
          exit 1;
        fi

        # Split alias command's options
        alias=$(grep -e "${{ inputs.alias }}.*=" "$config_file" | tr -d '"' | awk '/^${{ inputs.alias }}[[:space:]]*=/ {sub(/^${{ inputs.alias }}[[:space:]]*=[[:space:]]*/, ""); print; exit}')

        before_empty_dashes=""
        after_empty_dashes=""
        reached_empty_dashes=false

        IFS=' '

        read -ra args <<< "$alias"

        if [[ "${args[0]}" != "fmt" && "${{ inputs.alias }}" != "fmt" ]]; then
          echo "The provided alias is invalid!";
          exit 1;
        fi

        for arg in "${args[@]}"; do
          if [[ "$arg" == "--" ]]; then
            reached_empty_dashes=true;
            continue;
          fi

          if $reached_empty_dashes; then
            after_empty_dashes="$after_empty_dashes $arg";
          else
            before_empty_dashes="$before_empty_dashes $arg";
          fi
        done

        # Run cargo and store the original output
        CARGO_STATUS=0
        CARGO_OUTPUT=$(cargo ${before_empty_dashes:-fmt} --all --manifest-path=${{ inputs.manifest-path }} -- $after_empty_dashes --color=always --check 2>/dev/null) || CARGO_STATUS=$?

        if [ ${CARGO_STATUS} -eq 0 ]; then
            cat <<MARKDOWN_INTRO >> $GITHUB_STEP_SUMMARY
        # Rustfmt Results

        The code is formatted perfectly!
        MARKDOWN_INTRO
        else
            cat <<MARKDOWN_INTRO >> $GITHUB_STEP_SUMMARY
        # Rustfmt Results

        \`cargo fmt\` reported formatting errors in the following locations.
        You can fix them by executing the following command and committing the changes.
        \`\`\`bash
        cargo fmt --all
        \`\`\`
        MARKDOWN_INTRO

            echo "${CARGO_OUTPUT}" |
                # Strip color codes
                sed 's/\x1B\[[0-9;]*[A-Za-z]//g' |
                # Strip (some) cursor movements
                sed 's/\x1B.[A-G]//g' |
                tr "\n" "\r" |
                # Wrap each location into a HTML details
                sed -E 's#Diff in ([^\r]*?) at line ([[:digit:]]+):\r((:?[ +-][^\r]*\r)+)#<details>\n<summary>\1:\2</summary>\n\n```diff\n\3```\n\n</details>\n\n#g' |
                tr "\r" "\n" >> $GITHUB_STEP_SUMMARY
        fi

        # Print the original cargo message
        echo "${CARGO_OUTPUT}"
        # Exit with the same status as cargo
        exit "${CARGO_STATUS}"
