name: PR Differences Mutants
description: "Runs mutants corresponding to its given inputs and uploads the outcomes to artifacts"
branding:
  icon: "users"
  color: "gray-dark"

inputs:
  shard:
    description: "The number of the shard to run (`-1` if ran without shards)"
    required: false
    default: -1
  package:
    description: "The package to run mutants on. `stackslib`, `stacks-node` and `stacks-signer` are independent, all others are run as `small`."
    required: true

runs:
  using: "composite"

  steps:
    # Cleanup Runner
    - name: Cleanup Runner
      id: runner_cleanup
      uses: stacks-network/actions/cleanup/disk@main

    # Checkout the stacks-core code
    - name: Checkout stacks-core repo
      id: git_checkout_stacks_core
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Relative diff
      id: relative_diff
      shell: bash
      run: |
        git diff $(git merge-base origin/${{ github.base_ref || 'develop' }} HEAD)..HEAD > git.diff

    - name: Install cargo-mutants
      id: install_cargo_mutants
      shell: bash
      run: |
        cargo install --version 24.7.1 cargo-mutants --locked # v24.7.1

    - uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb # v2.53.2
      name: Install cargo-nextest
      id: install_cargo_nextest
      with:
        tool: nextest # Latest version

    - name: Update git diff
      id: update_git_diff
      shell: bash
      run: |
        input_file="git.diff"
        temp_file="temp_diff_file.diff"

        # Check if the file exists and is not empty
        if [ ! -s "$input_file" ]; then
          echo "Diff file ($input_file) is missing or empty!"
          exit 1
        fi

        # Remove all lines related to deleted files including the first 'diff --git' line
        awk '
          /^diff --git/ {
            diff_line = $0
            getline
            if ($0 ~ /^deleted file mode/) {
              in_deleted_file_block = 1
            } else {
              if (diff_line != "") {
                print diff_line
                diff_line = ""
              }
              in_deleted_file_block = 0
            }
          }
          !in_deleted_file_block
        ' "$input_file" > "$temp_file" && mv "$temp_file" "$input_file"

        # Remove 'diff --git' lines only when followed by 'similarity index', 'rename from', and 'rename to'
        awk '
          /^diff --git/ {
            diff_line = $0
            getline
            if ($0 ~ /^similarity index/) {
              getline
              if ($0 ~ /^rename from/) {
                getline
                if ($0 ~ /^rename to/) {
                  next
                }
              }
            }
            print diff_line  
          }
          { print }
        ' "$input_file" > "$temp_file" && mv "$temp_file" "$input_file"

    - name: Split diffs
      id: split_diffs
      shell: bash
      run: |
        # Check that the file exists before performing actions on it
        if [ ! -s git.diff ]; then
          echo "Diff file (git.diff) is missing or empty!"
          exit 1
        fi

        # Make a file containing all the mutants for the differences in the PR and a folder to split them into big and small packages
        cargo mutants --in-diff git.diff --list > all_mutants.txt
        if [ $? -ne 0 ]; then 
          echo "Error retrieving the list of mutants!"
          exit $?
        fi

        mkdir -p mutants_by_packages

        # Check that the file exists before performing actions on it
        if [ ! -s all_mutants.txt ]; then
          echo "The file containing mutants (all_mutants.txt) is missing or empty!"
          exit 1
        fi

        # Split the differences from git into packages: 'stackslib', 'stacks-node', 'stacks-signer' and small packages (all others) and put them into separate files
        while IFS= read -r line; do
          package=$(echo "$line" | cut -d'/' -f1)

          case $package in
            "stackslib")
              echo "$line" >> "mutants_by_packages/stackslib.txt"
              ;;
            "testnet")
              echo "$line" >> "mutants_by_packages/stacks-node.txt"
              ;;
            "stacks-signer")
              echo "$line" >> "mutants_by_packages/stacks-signer.txt"
              ;;
            *)
              echo "$line" >> "mutants_by_packages/small-packages.txt"
              ;;
          esac
        done < all_mutants.txt

        # Create regex patterns of the mutants to be ran for `cargo mutants` -F flag and output them to files to be used later
        for package in mutants_by_packages/*; do
          regex_pattern=""

          while IFS= read -r line; do
            escaped_line=$(echo "$line" | sed 's/[][()\.^$*+?{}|]/\\&/g')
            regex_pattern+="($escaped_line)|"
          done < "$package"

          regex_pattern="${regex_pattern%|}"

          case $package in
            "mutants_by_packages/stackslib.txt")
              echo "$regex_pattern" > mutants_by_packages/regex-stackslib.txt
              ;;
            "mutants_by_packages/stacks-node.txt")
              echo "$regex_pattern" > mutants_by_packages/regex-stacks-node.txt
              ;;
            "mutants_by_packages/stacks-signer.txt")
              echo "$regex_pattern" > mutants_by_packages/regex-stacks-signer.txt
              ;;
            *)
              echo "$regex_pattern" > mutants_by_packages/regex-small-packages.txt
              ;;
          esac
        done

        exit 0

    - name: Run mutants
      id: run_mutants
      shell: bash
      run: |
        # Disable immediate exit on error
        set +e

        # Check which type of mutants to run: big, small, with or without shards, then capture the exit code
        if [[ ${{ inputs.shard }} == -1 ]]; then
          if [[ ${{ inputs.package }} == stackslib ]]; then
            if [[ -f mutants_by_packages/regex-stackslib.txt ]]; then
              echo "Running mutants without shards on stackslib package"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-stackslib.txt)" -E ": replace .{1,2} with .{1,2} in " --output ./ --test-tool=nextest -- --all-targets --test-threads 1
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          elif [[ ${{ inputs.package }} == stacks-node ]]; then
            if [[ -f mutants_by_packages/regex-stacks-node.txt ]]; then
              echo "Running mutants without shards on stacks-node package"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-stacks-node.txt)" -E ": replace .{1,2} with .{1,2} in " --output ./ --test-tool=nextest -- --all-targets --test-threads 1
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          elif [[ ${{ inputs.package }} == stacks-signer ]]; then
            if [[ -f mutants_by_packages/regex-stacks-signer.txt ]]; then
              # Run an initial cargo nextest
              cargo nextest run -p stacks-signer --test-threads 1

              echo "Running mutants without shards on stacks-signer package"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-stacks-signer.txt)" -E ": replace .{1,2} with .{1,2} in " --output ./ --test-tool=nextest -- --all-targets --test-threads 1
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          else
            if [[ -f mutants_by_packages/regex-small-packages.txt ]]; then
              echo "Running mutants without shards on small packages"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-small-packages.txt)" -E ": replace .{1,2} with .{1,2} in " --output ./ --test-tool=nextest -- --all-targets
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          fi
        else
          if [[ ${{ inputs.package }} == stackslib ]]; then
            if [[ -f mutants_by_packages/regex-stackslib.txt ]]; then
              echo "Running mutants with shard ${{ inputs.shard }} on stackslib package"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-stackslib.txt)" -E ": replace .{1,2} with .{1,2} in " --shard ${{ inputs.shard }}/8 --output ./ --test-tool=nextest -- --all-targets --test-threads 1
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          elif [[ ${{ inputs.package }} == stacks-node ]]; then
            if [[ -f mutants_by_packages/regex-stacks-node.txt ]]; then
              echo "Running mutants with shard ${{ inputs.shard }} on stacks-node package"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-stacks-node.txt)" -E ": replace .{1,2} with .{1,2} in " --shard ${{ inputs.shard }}/4 --output ./ --test-tool=nextest -- --all-targets --test-threads 1
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          else
            if [[ -f mutants_by_packages/regex-small-packages.txt ]]; then
              echo "Running mutants with shard ${{ inputs.shard }} on small packages"
              cargo mutants --timeout-multiplier 1.5 --no-shuffle -vV -F "$(<mutants_by_packages/regex-small-packages.txt)" -E ": replace .{1,2} with .{1,2} in " --shard ${{ inputs.shard }}/4 --output ./ --test-tool=nextest -- --all-targets
              exit_code=$?
            else
              echo "File containing mutants doesn't exist!"
            fi
          fi
        fi

        # Create the folder only containing the outcomes (.txt files) and make a file containing the exit code of the command
        mkdir mutants-shard-${{ inputs.package }}-${{ inputs.shard }}
        echo "$exit_code" > ./mutants-shard-${{ inputs.package }}-${{ inputs.shard }}/exit_code.txt
        mv ./mutants.out/*.txt mutants-shard-${{ inputs.package }}-${{ inputs.shard }}/

        # Enable immediate exit on error again
        set -e

    - name: Upload artifact
      id: upload_artifact
      uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
      with:
        name: mutants-shard-${{ inputs.package }}-${{ inputs.shard }}
        path: mutants-shard-${{ inputs.package }}-${{ inputs.shard }}
